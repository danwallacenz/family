// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package family.domain;

import family.domain.Person;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Person_Roo_Finder {
    
    public static TypedQuery<Person> Person.findPeopleByFatherOrMother(Person father, Person mother) {
        if (father == null) throw new IllegalArgumentException("The father argument is required");
        if (mother == null) throw new IllegalArgumentException("The mother argument is required");
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE o.father = :father OR o.mother = :mother", Person.class);
        q.setParameter("father", father);
        q.setParameter("mother", mother);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByMother(Person mother) {
        if (mother == null) throw new IllegalArgumentException("The mother argument is required");
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE o.mother = :mother", Person.class);
        q.setParameter("mother", mother);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByMotherAndFather(Person mother, Person father) {
        if (mother == null) throw new IllegalArgumentException("The mother argument is required");
        if (father == null) throw new IllegalArgumentException("The father argument is required");
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE o.mother = :mother AND o.father = :father", Person.class);
        q.setParameter("mother", mother);
        q.setParameter("father", father);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByNameLike(java.lang.String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Person.class);
        q.setParameter("name", name);
        return q;
    }
    
}
