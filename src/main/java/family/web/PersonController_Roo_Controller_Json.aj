// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package family.web;

import family.domain.Person;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect PersonController_Roo_Controller_Json {
    
//    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
//    @ResponseBody
//    public ResponseEntity<java.lang.String> PersonController.showJson(@PathVariable("id") java.lang.Long id) {
//        Person person = Person.findPerson(id);
//        HttpHeaders headers = new HttpHeaders();
//        headers.add("Content-Type", "application/text; charset=utf-8");
//        if (person == null) {
//            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
//        }
//        return new ResponseEntity<String>(person.toJson(), headers, HttpStatus.OK);
//    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> PersonController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        List<Person> result = Person.findAllPeople();
        return new ResponseEntity<String>(Person.toJsonArray(result), headers, HttpStatus.OK);
    }
    
//    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
//    public ResponseEntity<java.lang.String> PersonController.createFromJson(@RequestBody java.lang.String json) {
//        Person person = Person.fromJsonToPerson(json);
//        person.persist();
//        HttpHeaders headers = new HttpHeaders();
//        headers.add("Content-Type", "application/text");
//        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
//    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> PersonController.createFromJsonArray(@RequestBody java.lang.String json) {
        for (Person person: Person.fromJsonArrayToPeople(json)) {
            person.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
//    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
//    public ResponseEntity<java.lang.String> PersonController.updateFromJson(@RequestBody java.lang.String json) {
//        HttpHeaders headers = new HttpHeaders();
//        headers.add("Content-Type", "application/text");
//        Person person = Person.fromJsonToPerson(json);
//        if (person.merge() == null) {
//            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
//        }
//        return new ResponseEntity<String>(headers, HttpStatus.OK);
//    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> PersonController.updateFromJsonArray(@RequestBody java.lang.String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (Person person: Person.fromJsonArrayToPeople(json)) {
            if (person.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> PersonController.deleteFromJson(@PathVariable("id") java.lang.Long id) {
        Person person = Person.findPerson(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (person == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        person.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFatherOrMother", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> PersonController.jsonFindPeopleByFatherOrMother(@RequestParam("father") Person father, @RequestParam("mother") Person mother) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Person.toJsonArray(Person.findPeopleByFatherOrMother(father, mother).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMother", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> PersonController.jsonFindPeopleByMother(@RequestParam("mother") Person mother) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Person.toJsonArray(Person.findPeopleByMother(mother).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMotherAndFather", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> PersonController.jsonFindPeopleByMotherAndFather(@RequestParam("mother") Person mother, @RequestParam("father") Person father) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Person.toJsonArray(Person.findPeopleByMotherAndFather(mother, father).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> PersonController.jsonFindPeopleByNameLike(@RequestParam("name") java.lang.String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(Person.toJsonArray(Person.findPeopleByNameLike(name).getResultList()), headers, HttpStatus.OK);
    }
    
}
